// <auto-generated />
using System;
using CSD.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CSD.ORM.Migrations
{
    [DbContext(typeof(CSDContext))]
    [Migration("20200502022930_SpecialitySubjectMig")]
    partial class SpecialitySubjectMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CSD.Entities.Computer_Engineering.KnownProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LevelId");

                    b.Property<int>("PersonelId");

                    b.Property<int>("ProgramId");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("PersonelId");

                    b.HasIndex("ProgramId");

                    b.ToTable("KnownProgram");
                });

            modelBuilder.Entity("CSD.Entities.Computer_Engineering.LevelOfLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId");

                    b.Property<int>("LevelId");

                    b.Property<int>("PersonelId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LevelId");

                    b.HasIndex("PersonelId");

                    b.ToTable("LevelOfLanguage");
                });

            modelBuilder.Entity("CSD.Entities.Computer_Engineering.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("CSD.Entities.Shared.AcademicDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("AcademicDegree");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dosent"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Professor"
                        });
                });

            modelBuilder.Entity("CSD.Entities.Shared.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CSD.Entities.Shared.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<string>("RoleId1");

                    b.Property<string>("UserId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("CSD.Entities.Shared.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Bakı",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Gəncə",
                            Status = true
                        });
                });

            modelBuilder.Entity("CSD.Entities.Shared.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NumCode");

                    b.Property<string>("Phonecode");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Azərbaycan",
                            NumCode = "222",
                            Phonecode = "+994"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Turkiyə",
                            NumCode = "333",
                            Phonecode = "+122"
                        });
                });

            modelBuilder.Entity("CSD.Entities.Shared.Credit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Credit");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "6"
                        },
                        new
                        {
                            Id = 7,
                            Name = "7"
                        },
                        new
                        {
                            Id = 8,
                            Name = "8"
                        },
                        new
                        {
                            Id = 9,
                            Name = "9"
                        },
                        new
                        {
                            Id = 10,
                            Name = "21"
                        });
                });

            modelBuilder.Entity("CSD.Entities.Shared.DepartmentPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicDegreeId");

                    b.Property<int>("PersonelId");

                    b.Property<int>("PositionId");

                    b.HasKey("Id");

                    b.HasIndex("AcademicDegreeId");

                    b.HasIndex("PersonelId");

                    b.HasIndex("PositionId");

                    b.ToTable("DepartmentPosition");
                });

            modelBuilder.Entity("CSD.Entities.Shared.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Document");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Diplom"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Atestat"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Şəhadətnamə"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Vəsiqə"
                        });
                });

            modelBuilder.Entity("CSD.Entities.Shared.DocumetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("DocumetType");
                });

            modelBuilder.Entity("CSD.Entities.Shared.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginTime");

                    b.Property<int>("CityId");

                    b.Property<int>("DocumentId");

                    b.Property<int>("EducationDegreeId");

                    b.Property<string>("EducationalInstitution")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PersonelId");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EducationDegreeId");

                    b.HasIndex("PersonelId");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("CSD.Entities.Shared.EducationDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("EducationDegree");
                });

            modelBuilder.Entity("CSD.Entities.Shared.FamilyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("FamilyStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Evli"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Subay"
                        });
                });

            modelBuilder.Entity("CSD.Entities.Shared.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Kişi"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Qadın"
                        });
                });

            modelBuilder.Entity("CSD.Entities.Shared.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Azərbaycan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "İngilis"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rus"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Çin"
                        });
                });

            modelBuilder.Entity("CSD.Entities.Shared.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Level");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Zəif"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kafi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Orta"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Yaxşı"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Əla"
                        });
                });

            modelBuilder.Entity("CSD.Entities.Shared.PersonDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocumentTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Path");

                    b.Property<int>("PersonelId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("PersonelId");

                    b.ToTable("PersonDocument");
                });

            modelBuilder.Entity("CSD.Entities.Shared.PersonPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PersonelId");

                    b.Property<int>("PhoneTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PersonelId");

                    b.HasIndex("PhoneTypeId");

                    b.ToTable("PersonPhone");
                });

            modelBuilder.Entity("CSD.Entities.Shared.Personel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthdate");

                    b.Property<int>("CityId");

                    b.Property<string>("Email");

                    b.Property<int>("FamilyStatusId");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FinCode");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("GenderId");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SerialNumber");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("FamilyStatusId");

                    b.HasIndex("GenderId");

                    b.ToTable("Personel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateTime(2020, 5, 1, 19, 29, 29, 838, DateTimeKind.Local).AddTicks(1835),
                            CityId = 1,
                            Email = "ilkintagiyev06@gmail.com",
                            FamilyStatusId = 2,
                            FatherName = "Rafiq",
                            FinCode = "111111",
                            Firstname = "Ilkin",
                            GenderId = 1,
                            Lastname = "Tağıyev",
                            Residence = "Oktay Veliyev",
                            SerialNumber = "09876543"
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateTime(2020, 5, 1, 19, 29, 29, 840, DateTimeKind.Local).AddTicks(6975),
                            CityId = 1,
                            Email = "ilkintagiyev06@gmail.com",
                            FamilyStatusId = 2,
                            FatherName = "Rafiq",
                            FinCode = "111111",
                            Firstname = "Eltac",
                            GenderId = 1,
                            Lastname = "Tağıyev",
                            Residence = "Oktay Veliyev",
                            SerialNumber = "09876543"
                        });
                });

            modelBuilder.Entity("CSD.Entities.Shared.PhoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PhoneType");
                });

            modelBuilder.Entity("CSD.Entities.Shared.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("CSD.Entities.Shared.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Semester");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "I semestr"
                        },
                        new
                        {
                            Id = 2,
                            Name = "II semestr"
                        },
                        new
                        {
                            Id = 3,
                            Name = "III semestr"
                        },
                        new
                        {
                            Id = 4,
                            Name = "IV semestr"
                        },
                        new
                        {
                            Id = 5,
                            Name = "V semestr"
                        },
                        new
                        {
                            Id = 6,
                            Name = "VI semestr"
                        },
                        new
                        {
                            Id = 7,
                            Name = "VII semestr"
                        },
                        new
                        {
                            Id = 8,
                            Name = "VIII semestr"
                        });
                });

            modelBuilder.Entity("CSD.Entities.Shared.SpecialitySubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreditId");

                    b.Property<int>("SemesterId");

                    b.Property<int>("SpecialityId");

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("CreditId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SpecialitySubject");
                });

            modelBuilder.Entity("CSD.Entities.Shared.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Specialty");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "050631",
                            Major = "Kompüter mühəndisliyi"
                        },
                        new
                        {
                            Id = 2,
                            Code = "050655",
                            Major = "İnformasiya texnologiyaları"
                        },
                        new
                        {
                            Id = 3,
                            Code = "050656",
                            Major = "Sistem mühəndisliyi"
                        },
                        new
                        {
                            Id = 4,
                            Code = "050629",
                            Major = "Mexatronika və robototexnika mühəndisliyi"
                        },
                        new
                        {
                            Id = 5,
                            Code = "XTB 050106",
                            Major = "İnformasiya təhlükəsizliyi"
                        });
                });

            modelBuilder.Entity("CSD.Entities.Shared.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Subject");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Azərbaycan tarixi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Xarici dil"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Xarici dil - 1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Xarici dil - 2"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Riyaziyyat"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Riyaziyyat-1"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Riyaziyyat-2"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Riyaziyyat-3"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Fizika"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Fizika-1"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Fizika-2"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Kompüter mühəndisliyinin əsasları"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Azərbaycan dili və nitq mədəniyyəti"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Azərbaycan Respublikasının Konstitusiyası və hüququn əsasları	"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Proqramlaşdırmanın əsasları"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Multimediya texnologiyaları"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Ehtimal nəzəriyyəsi və statistika"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Dövrlər nəzəriyyəsi"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Kompüter arxitekturası"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Fəlsəfə"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Kompüter şəbəkələri"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Fəlsəfə"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Sistemli analiz və kompüterdə modelləşdirmə"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Kompüterlərin tətbiqi nəzəriyyəsinin əsasları"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Veb proqramlaması və layihələndirmə"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Qeyri - səlis məntiq"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Qeyri-səlis sistemlər"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Istehsalın iqtisadiyyatı və menecment"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Elektronikanın əsasları"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Rəqəmsal  sistemlər"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Verilənlərin strukturu və verilənlər bazası sistemləri"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Mobil və paralel kompüter sistemləri"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Neyron şəbəkələri"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Mobil qurğuların proqramlaşdırılması"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Obyektyönlü layihələndirmə proqramlaşdırma "
                        },
                        new
                        {
                            Id = 37,
                            Name = "Əməliyyatların tədqiqi"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Kompüter sxemotexnikası və mikroprosessor sistemləri "
                        },
                        new
                        {
                            Id = 39,
                            Name = "Həyat fəaliyyətinin təhlükəsizliyi"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Proqram mühəndisliyinin əsasları və layihələndirmə"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Süni intellekt"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Kompüter riyaziyyatı"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Kompüter qrafikası"
                        },
                        new
                        {
                            Id = 44,
                            Name = "İdarəetmənin əsasları"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Kompüter mühəndisliyində siqnalların işlənməsi"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Kompüter sistemlərinin təhlükəsizliyi"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Sistemlərin simulyasiyası"
                        },
                        new
                        {
                            Id = 48,
                            Name = "İnternet texnologiyaları"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Mülki müdafiə"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Qərar qəbuletmə sistemlərinin əsasları"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Verilənlərdən biliklərin əldə edilməsi"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Elektron sxemlərin kompüter modelləşdirilməsi"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Telekommunikasiya sistemləri və naqilsiz şəbəkələr"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Texniki xarici dil"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Təcrübə"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Yekun dövlət attestasiyası"
                        });
                });

            modelBuilder.Entity("CSD.Entities.Shared.UserApp", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<int>("PersonelId");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonelId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CSD.Entities.Shared.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(250);

                    b.Property<DateTime>("BeginDate");

                    b.Property<int>("CityId");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("EndTme");

                    b.Property<string>("JobResponsibilities")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("PersonelId");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonelId");

                    b.ToTable("WorkExperience");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CSD.Entities.Computer_Engineering.KnownProgram", b =>
                {
                    b.HasOne("CSD.Entities.Shared.Level", "Level")
                        .WithMany("KnownProgram")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Personel", "Personel")
                        .WithMany("KnownProgram")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Computer_Engineering.Program", "Proqram")
                        .WithMany("KnownProgram")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSD.Entities.Computer_Engineering.LevelOfLanguage", b =>
                {
                    b.HasOne("CSD.Entities.Shared.Language", "Language")
                        .WithMany("LevelOfLanguage")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Level", "Level")
                        .WithMany("LevelOfLanguage")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Personel", "Personel")
                        .WithMany("LevelOfLanguage")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSD.Entities.Shared.ApplicationUserRole", b =>
                {
                    b.HasOne("CSD.Entities.Shared.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("CSD.Entities.Shared.UserApp")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.UserApp", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("CSD.Entities.Shared.City", b =>
                {
                    b.HasOne("CSD.Entities.Shared.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CSD.Entities.Shared.DepartmentPosition", b =>
                {
                    b.HasOne("CSD.Entities.Shared.AcademicDegree", "AcademicDegree")
                        .WithMany("DepartmentPosition")
                        .HasForeignKey("AcademicDegreeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Personel", "Personel")
                        .WithMany("DepartmentPosition")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Position", "Position")
                        .WithMany("DepartmentPosition")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSD.Entities.Shared.Education", b =>
                {
                    b.HasOne("CSD.Entities.Shared.City", "City")
                        .WithMany("Education")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Document", "Document")
                        .WithMany("Education")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.EducationDegree", "EducationDegree")
                        .WithMany("Education")
                        .HasForeignKey("EducationDegreeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Personel", "Personel")
                        .WithMany("Education")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CSD.Entities.Shared.PersonDocument", b =>
                {
                    b.HasOne("CSD.Entities.Shared.DocumetType", "DocumetType")
                        .WithMany("PersonDocument")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Personel", "Personel")
                        .WithMany("PersonDocument")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSD.Entities.Shared.PersonPhone", b =>
                {
                    b.HasOne("CSD.Entities.Shared.Country", "Country")
                        .WithMany("PersonPhone")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Personel", "Personel")
                        .WithMany("PersonPhone")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.PhoneType", "PhoneType")
                        .WithMany("PersonPhone")
                        .HasForeignKey("PhoneTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSD.Entities.Shared.Personel", b =>
                {
                    b.HasOne("CSD.Entities.Shared.City", "City")
                        .WithMany("Personel")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.FamilyStatus", "FamilyStatus")
                        .WithMany("Personel")
                        .HasForeignKey("FamilyStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Gender", "Gender")
                        .WithMany("Personel")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSD.Entities.Shared.SpecialitySubject", b =>
                {
                    b.HasOne("CSD.Entities.Shared.Credit", "Credit")
                        .WithMany("SpecialitySubject")
                        .HasForeignKey("CreditId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Semester", "Semester")
                        .WithMany("SpecialitySubject")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Subject", "Subject")
                        .WithMany("SpecialitySubject")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSD.Entities.Shared.UserApp", b =>
                {
                    b.HasOne("CSD.Entities.Shared.Personel", "Personel")
                        .WithMany("UserApp")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSD.Entities.Shared.WorkExperience", b =>
                {
                    b.HasOne("CSD.Entities.Shared.City", "City")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSD.Entities.Shared.Personel", "Personel")
                        .WithMany("WorkExperience")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CSD.Entities.Shared.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CSD.Entities.Shared.UserApp")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CSD.Entities.Shared.UserApp")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CSD.Entities.Shared.UserApp")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
